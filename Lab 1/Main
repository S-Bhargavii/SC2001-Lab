#include <stdio.h>
#include <stdlib.h>
#include <time.h>


int *arrayGenerate(int size, int max);
void arrayDuplicate(int * original_arr, int * clone_arr, int size);
void insertionSort(int * array,int start, int count);
void mergesort(int *array1, int l, int h);
void merge(int *array1, int l, int mid, int h);
void hybrid(int *array, int l, int h);
void hybridMerge(int *array, int l, int mid, int h);
int KEY_COMPARE;
int S = 7;

int main(int argc, const char * argv[]) {
	int size = 10000000;
	int max_val = 9999999;
    int *clone = (int *)malloc(sizeof(int) * size);
    int *array = arrayGenerate(size, max_val);
	size--;
	int choice;
    clock_t start, end;
    double time_elapsed;



    arrayDuplicate(array, clone, size); // create clone for resets

	do
	{
		/* code */
		printf("Choose algoithm:\n");
		printf("1.Hybrid\n");
		printf("2.Merge Sort\n");
		printf("3.Exit\n");
		scanf("%d", &choice);
        
		switch(choice)
		{
			case 1:
				KEY_COMPARE = 0;
                arrayDuplicate(clone, array, size);
                start = clock();
				hybrid(array, 0, size);
                end = clock();
                time_elapsed = ((double) (end - start));
                printf("Time taken: %.2f ms\n", time_elapsed);
				printf("Number of key comparisons: %d\n", KEY_COMPARE);
				break;
			case 2:
				KEY_COMPARE = 0;
                arrayDuplicate(clone, array, size);
                start = clock();
				mergesort(array, 0, size);
                end = clock();
                time_elapsed = ((double) (end - start));
                printf("Time taken: %.2f ms\n", time_elapsed);
				printf("Number of key comparisons: %d\n", KEY_COMPARE);
				break;
			default:
				break;
		}
	} while (choice != 3);
    
    for (int i = 0; i < size ; i++) {
        printf("%d\n", array[i]);
    }
    
    return 0;
}

int *arrayGenerate(int size, int max)
{
    int *randArray = (int *)malloc(sizeof(int) * size);
    for (int j = 0; j < size; j++) {
        randArray[j] = rand() % (max + 1); 
    }
    return randArray;
}

void arrayDuplicate(int * original_arr, int * clone_arr, int size){
    for (int i = 0; i < size+1; i++) {
        clone_arr[i] = original_arr[i];
    }
}

void insertionSort(int * array,int start, int end) {
    int value;
    for (int i = start +1; i <= end; i++) {
        for (int j = i; j > start; j--) {
		    KEY_COMPARE++;
            if (array[j-1] > array[j]) {
                value = array[j-1];
                array[j-1] = array[j];
                array[j] = value;
            } else {
                break;
            }
        }
    }
}

void mergesort(int *array1, int l, int h){
    if (l != h)
    {
        int mid = (l + h) / 2;
        mergesort(array1, l, mid);
        mergesort(array1, mid + 1, h);
        merge(array1, l, mid, h);
    }
    else
    {
        return;
        // base case
    }
}

void merge(int *array1, int l, int mid, int h)
{
    int i = l;
    int j = mid + 1;
    int k = 0;
    int size = h + 1; 
    int *temp = (int *)malloc(sizeof(int) * size);
    while (i <= mid && j <= h)
    {
        if (array1[i] < array1[j])
        {
            temp[k++] = array1[i++];
        }
        else
        {
            temp[k++] = array1[j++];
        }
        KEY_COMPARE++;
    }
    while (i <= mid)
    {
        temp[k++] = array1[i++];
    }
    while (j <= h)
    {
        temp[k++] = array1[j++];
    }

    for (int num = 0; num < k; num++)
    {
        array1[l++] = temp[num];
    }

	//Free the temporary arrray
	free(temp);
}

void hybrid(int *array, int l, int h)
{
    if ( h-l > S)
    {
        /* 
            this condition checks whether 
            to continue splitting the array 
            or stop and perform insertion sort
        */
        int mid = (l + h) / 2;
        hybrid(array, l, mid);
        hybrid(array, mid + 1, h);
        merge(array, l, mid, h);
    }
    else{
        insertionSort(array,l,h);
        return;
    }
}

